import fs from "fs";
import path from "path";
import { logger } from "../../utils/logger.js";
import tinycolor from "tinycolor2";

import StyleDictionary from "style-dictionary";
import { fileHeader } from "style-dictionary/utils";
import {
  logBrokenReferenceLevels,
  logVerbosityLevels,
  logWarningLevels,
} from "style-dictionary/enums";

// 0) CLEAN OUTPUT DIRECTORY
// ----------------------------------------------------------------------------
function cleanDist() {
  const distDir = path.resolve("build/tailwind");
  try {
    fs.rmSync(distDir, { recursive: true, force: true });
    console.info(`Removed ${distDir}`);
  } catch (err) {
    console.error(`No existing ${distDir} to remove`, err);
  }

  fs.mkdirSync(distDir, { recursive: true });
  logger.success(`Created fresh ${distDir}`);
}

// 1) TRANSFORMERS
// ----------------------------------------------------------------------------
/**
 * Transforms color values to space-separated RGB values
 * e.g. "#FF0000" -> "255 0 0"
 */
StyleDictionary.registerTransform({
  name: "color/spaceRGB",
  type: "value",
  filter: (token) => token.$type === "color",
  transform: (token) => {
    const { r, g, b } = tinycolor(token.$value).toRgb();
    return `${r} ${g} ${b}`;
  },
});

/**
 * Transforms token paths to kebab-case while preserving camelCase
 * e.g. ["text", "fontSize", "sm"] -> "text-fontSize-sm"
 */
StyleDictionary.registerTransform({
  name: "name/kebabWithCamel",
  type: "name",
  transform: (token) => token.path.join("-"),
});

/**
 * Converts camelCase to kebab-case
 * e.g. "fontSize" -> "font-size"
 */
function camelToKebab(str) {
  return str.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
}

/**
 * Transforms a dimension value or space-separated list of dimensions to pixel values
 * @param {string|number} value - The dimension value(s) to transform
 * @returns {string} Space-separated list of pixel values
 */
function formatPixels(value) {
  return parseSpaceSeparatedValues(value)
    .map(convertToPixels)
    .join(" ");
}

/**
 * Converts a single value to a pixel value
 * @param {string|number} value - The value to convert
 * @returns {string} The value with 'px' suffix if numeric
 */
function convertToPixels(value) {
  const num = parseFloat(value);
  if (isNaN(num)) return String(value);
  if (num === 0) return "0px";
  return `${num}px`;
}

/**
 * Parses a value into an array of space-separated values
 * @param {string|number} value - The value to parse
 * @returns {string[]} Array of individual values
 */
function parseSpaceSeparatedValues(value) {
  if (typeof value === "string" && value.includes(" ")) {
    return value.split(" ").filter(Boolean);
  }
  return [String(value)];
}

// Register the dimension transform
StyleDictionary.registerTransform({
  name: "dimension/px",
  type: "value",
  filter: (token) => token.original.$type === "dimension",
  transform: (token) => {
    const value = token.original.$value;
    if (value === undefined) return undefined;
    return formatPixels(value);
  },
});

// Some built-in transforms
const defaultTransforms = [
  "attribute/cti",
  "color/spaceRGB",
  "size/px",
  "name/kebab",
];

const tailwindTransforms = [
  "attribute/cti",
  "color/spaceRGB",
  "size/px",
  "name/kebabWithCamel",
];

StyleDictionary.registerTransformGroup({
  name: "custom/css",
  transforms: [
    "attribute/cti",
    "color/spaceRGB",
    "size/px",
    "name/kebab",
    "shadow/css/shorthand",
    "dimension/px",
  ],
});

// 2) FILE HEADERS
// ----------------------------------------------------------------------------
/**
 * Generates a warning header for auto-generated files
 */
StyleDictionary.registerFileHeader({
  name: "doNotEditWarningHeader",
  fileHeader: async () => {
    const dateTime = new Date().toLocaleString();
    return [`Autogenerated file. Generated at ${dateTime}.`, "Do not edit!"];
  },
});

/**
 * Generates a header for editable auto-generated files
 */
StyleDictionary.registerFileHeader({
  name: "canEditHeader",
  fileHeader: async () => {
    const dateTime = new Date().toLocaleString();
    return [
      `Autogenerated file. Generated at ${dateTime}.`,
      "This file can be edited to extend the base configuration.",
    ];
  },
});

// 3) A HELPER TO PRODUCE JS CODE WITH UNQUOTED KEYS
// ----------------------------------------------------------------------------
/**
 * Validates if a string is a valid JavaScript object key
 * @param {string} key - The key to validate
 * @returns {boolean} Whether the key is valid
 */
function isValidJSKey(key) {
  // Basic check for a valid JS identifier: a-z, A-Z, 0-9, _, $
  // cannot start with digit
  return /^[A-Za-z_$][A-Za-z0-9_$]*$/.test(key);
}

/**
 * Converts a value to a JavaScript literal representation
 * @param {any} value - The value to convert
 * @param {number} indent - The current indentation level
 * @returns {string} JavaScript literal representation
 */
function toJSLiteral(value, indent = 2) {
  if (typeof value === "string") {
    return `"${value}"`;
  }
  if (Array.isArray(value)) {
    const arrContent = value.map((v) => toJSLiteral(v, indent + 2)).join(", ");
    return `[${arrContent}]`;
  }
  if (typeof value === "object" && value !== null) {
    let spaces = " ".repeat(indent);
    let result = "{\n";
    const entries = Object.entries(value);
    entries.forEach(([k, v], index) => {
      let keyName = isValidJSKey(k) ? k : `"${k}"`;
      result += `${spaces}${keyName}: ${toJSLiteral(v, indent + 2)}`;
      if (index < entries.length - 1) {
        result += ",";
      }
      result += "\n";
    });
    result += " ".repeat(indent - 2) + "}";
    return result;
  }
  return String(value); // catch-all for booleans, numbers, etc.
}

/**
 * Sets a nested property in an object using an array of keys
 * @param {Object} obj - The target object
 * @param {string[]} pathArray - Array of keys representing the path
 * @param {any} value - The value to set
 */
function setNestedProperty(obj, pathArray, value) {
  let current = obj;
  for (let i = 0; i < pathArray.length; i++) {
    const key = pathArray[i];
    if (i === pathArray.length - 1) {
      current[key] = value;
    } else {
      if (!current[key]) {
        current[key] = {};
      }
      current = current[key];
    }
  }
}

// 4) FORMATTERS
// ----------------------------------------------------------------------------

/**
 * css/index-file
 * Existing index file for:
 * @import "./base.css";
 * @import "./dark.css";
 * plus @tailwind directives
 */
StyleDictionary.registerFormat({
  name: "css/index-file",
  format: async function ({ file, options, dictionary }) {
    const header = await fileHeader({ file, options });

    const content = `
/* Import Generated Design Token Files */
@import "./base.css";
@import "./dark.css";

/* Tailwind Base, Components, and Utilities */
@tailwind base;
@tailwind components;
@tailwind utilities;
`.trimStart();

    return header + content;
  },
});

/**
 * tailwind/base
 * -> Outputs a partial config in "tailwind.base.js" that references tokens.
 *    No 'content' array or 'plugins' here. We define darkMode + theme.extend.
 */
StyleDictionary.registerFormat({
  name: "tailwind/base",
  format: async function ({ file, options, dictionary }) {
    const header = await fileHeader({ file, options });

    const partialConfig = {
      darkMode: "class",
      theme: {
        extend: {
          colors: {},
        },
      },
    };

    // Insert tokens into partialConfig.theme.extend
    dictionary.allTokens.forEach((token) => {
      let cssRef;
      if (token?.$type === "color") {
        // color tokens are stored as numeric triple => use rgb(var(--...))
        cssRef = `rgb(var(--${camelToKebab(token.name)}))`;
      } else {
        // shadow or anything else => just var(--tokenName)
        // (the actual value is already a final string from the transform)
        cssRef = `var(--${camelToKebab(token.name)})`;
      }

      // Flatten nested color objects
      const segments = token.name.split("-");
      if (segments[0] === "colors") {
        // For colors, create flattened keys like "button-primary-bg"
        const flattenedKey = segments.slice(1).join("-");
        partialConfig.theme.extend.colors[flattenedKey] = cssRef;
      } else {
        // For non-colors, keep the nested structure
        setNestedProperty(partialConfig.theme.extend, segments, cssRef);
      }
    });

    const partialStr = toJSLiteral(partialConfig, 2);
    const snippet = `/** @type {import('tailwindcss').Config} */
export default ${partialStr};
`;

    return header + snippet;
  },
});

/**
 * tailwind/config
 * -> Outputs "tailwind.config.js" that imports 'tailwind.base.js'
 *    and merges or overrides content, plugins, etc.
 */
StyleDictionary.registerFormat({
  name: "tailwind/config",
  format: async function ({ file, options, dictionary }) {
    const header = await fileHeader({ file, options });

    // We'll build a snippet that merges the base partial config
    const snippet = `/** @type {import('tailwindcss').Config} */

import base from "./tailwind.base.js";

export default {
  darkMode: base.darkMode,

  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}"
  ],

  plugins: [
  ],

  theme: {
    ...base.theme,

    extend: {
      ...(base.theme?.extend || {}),
    }
  }
};
`;
    return header + snippet;
  },
});

// 5) BUILD SCRIPTS
// ----------------------------------------------------------------------------
async function main() {
  cleanDist();

  // Base styles
  {
    console.log("Building base theme...");
    const SD = new StyleDictionary({
      source: [
        "tokens/**/!(*.dark).json", // all .json files that do NOT end with .dark.json
      ],
      log: {
        warnings: logWarningLevels.warn, // 'warn' | 'error' | 'disabled'
        verbosity: logVerbosityLevels.verbose, // 'default' | 'silent' | 'verbose'
        errors: {
          brokenReferences: logBrokenReferenceLevels.throw, // 'throw' | 'console'
        },
      },
      platforms: {
        // 1) CSS output
        base: {
          transformGroup: "custom/css",
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "base.css",
              format: "css/variables",
              options: {
                fileHeader: "doNotEditWarningHeader",
                outputReferences: true,
              },
            },
            {
              destination: "index.css",
              format: "css/index-file",
              options: {
                fileHeader: "canEditHeader",
              },
            },
          ],
        },
        // 2) Tailwind partial + merged configs in the repo root
        tailwind: {
          transformGroup: "js",
          transforms: tailwindTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "tailwind.base.js",
              format: "tailwind/base",
              options: {
                fileHeader: "doNotEditWarningHeader",
              },
            },
            {
              destination: "tailwind.config.js",
              format: "tailwind/config",
              options: {
                fileHeader: "canEditHeader",
              },
            },
          ],
        },
      },
    });
    SD.buildAllPlatforms();
    logger.success("Base theme built!");
  }

  // Dark styles
  {
    console.log("Building dark theme...");
    const SD = new StyleDictionary({
      source: [
        "tokens/**/*(*.dark).json", // only dark files
      ],
      log: { verbosity: "verbose" },
      platforms: {
        base: {
          transformGroup: "css",
          transforms: defaultTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "dark.css",
              format: "css/variables",
              options: {
                fileHeader: "doNotEditWarningHeader",
                selector: ".dark",
                outputReferences: true,
              },
            },
          ],
        },
      },
    });
    SD.buildAllPlatforms();
    logger.success("Dark theme built!");
  }

  logger.success("All builds finished!");
}

main().catch((err) => {
  console.error("Error building tokens:", err);
  process.exit(1);
});

export { main };
